// <auto-generated />
using System;
using Employment.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Job.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20251014185539_update-skillsl")]
    partial class updateskillsl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Employment.Infrastructure.Entitys.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.ApplyExperience", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ExperienceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExperienceID");

                    b.ToTable("ApplyExperience", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.ApplyJob", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("EmployeeID")
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("JobID")
                        .HasColumnType("INT");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("JobID");

                    b.ToTable("ApplyJob", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.ApplySkill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("SkillID")
                        .HasColumnType("INT");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("ID");

                    b.HasIndex("SkillID");

                    b.HasIndex("UserID");

                    b.ToTable("ApplySkill", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Comments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PostID")
                        .HasColumnType("INT");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("id");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Company", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("UserID");

                    b.ToTable("Companys", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Connections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Reseiver")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int>("Status")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("Reseiver");

                    b.HasIndex("Sender");

                    b.ToTable("Connections", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Conversations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAT")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserID1")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("UserID2")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID1");

                    b.HasIndex("UserID2");

                    b.ToTable("Conversations", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Employees", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutYou")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("UniverCity")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("secoundName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Experience", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CompanyID")
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("FinishAT")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("StartAT")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Experience", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Followers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("CompanyID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("FollowerID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("FollowerID");

                    b.ToTable("Followers", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Jobs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CompanyID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("NVARCHAR(1500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("FullTimeORPartTime")
                        .HasColumnType("INT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<int>("RemoteOROnSite")
                        .HasColumnType("INT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.JobSkillType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("JobID")
                        .HasColumnType("INT");

                    b.Property<int>("SkillTypeID")
                        .HasColumnType("INT");

                    b.HasKey("id");

                    b.HasIndex("JobID");

                    b.HasIndex("SkillTypeID");

                    b.ToTable("JobSkillType", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Likes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("PostID")
                        .HasColumnType("INT");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("id");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.LikesOnComments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CommentID")
                        .HasColumnType("INT");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("id");

                    b.HasIndex("CommentID");

                    b.HasIndex("UserID");

                    b.ToTable("LikesOnComments", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Posts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasMaxLength(600)
                        .HasColumnType("NVARCHAR(600)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<int?>("SkillTypeID")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("SkillTypeID");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.SkillsType", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("id");

                    b.ToTable("SkillsType", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            TypeName = "C#"
                        },
                        new
                        {
                            id = 2,
                            TypeName = ".NET Core"
                        },
                        new
                        {
                            id = 3,
                            TypeName = "ASP.NET Core"
                        },
                        new
                        {
                            id = 4,
                            TypeName = "Entity Framework Core"
                        },
                        new
                        {
                            id = 5,
                            TypeName = "LINQ"
                        },
                        new
                        {
                            id = 6,
                            TypeName = "RESTful APIs"
                        },
                        new
                        {
                            id = 7,
                            TypeName = "Design Patterns"
                        },
                        new
                        {
                            id = 8,
                            TypeName = "SOLID Principles"
                        },
                        new
                        {
                            id = 9,
                            TypeName = "Dependency Injection"
                        },
                        new
                        {
                            id = 10,
                            TypeName = "SignalR"
                        },
                        new
                        {
                            id = 11,
                            TypeName = "Microservices"
                        },
                        new
                        {
                            id = 12,
                            TypeName = "Clean Architecture"
                        },
                        new
                        {
                            id = 13,
                            TypeName = "CQRS"
                        },
                        new
                        {
                            id = 14,
                            TypeName = "HTML"
                        },
                        new
                        {
                            id = 15,
                            TypeName = "CSS"
                        },
                        new
                        {
                            id = 16,
                            TypeName = "JavaScript"
                        },
                        new
                        {
                            id = 17,
                            TypeName = "TypeScript"
                        },
                        new
                        {
                            id = 18,
                            TypeName = "React"
                        },
                        new
                        {
                            id = 19,
                            TypeName = "Angular"
                        },
                        new
                        {
                            id = 20,
                            TypeName = "Vue.js"
                        },
                        new
                        {
                            id = 21,
                            TypeName = "Bootstrap"
                        },
                        new
                        {
                            id = 22,
                            TypeName = "Tailwind CSS"
                        },
                        new
                        {
                            id = 23,
                            TypeName = "Responsive Design"
                        },
                        new
                        {
                            id = 24,
                            TypeName = "UI/UX Design"
                        },
                        new
                        {
                            id = 25,
                            TypeName = "SQL Server"
                        },
                        new
                        {
                            id = 26,
                            TypeName = "MySQL"
                        },
                        new
                        {
                            id = 27,
                            TypeName = "PostgreSQL"
                        },
                        new
                        {
                            id = 28,
                            TypeName = "MongoDB"
                        },
                        new
                        {
                            id = 29,
                            TypeName = "Redis"
                        },
                        new
                        {
                            id = 30,
                            TypeName = "Database Design"
                        },
                        new
                        {
                            id = 31,
                            TypeName = "Query Optimization"
                        },
                        new
                        {
                            id = 32,
                            TypeName = "Data Analysis"
                        },
                        new
                        {
                            id = 33,
                            TypeName = "Git"
                        },
                        new
                        {
                            id = 34,
                            TypeName = "GitHub"
                        },
                        new
                        {
                            id = 35,
                            TypeName = "CI/CD"
                        },
                        new
                        {
                            id = 36,
                            TypeName = "Docker"
                        },
                        new
                        {
                            id = 37,
                            TypeName = "Kubernetes"
                        },
                        new
                        {
                            id = 38,
                            TypeName = "Azure"
                        },
                        new
                        {
                            id = 39,
                            TypeName = "AWS"
                        },
                        new
                        {
                            id = 40,
                            TypeName = "Linux"
                        },
                        new
                        {
                            id = 41,
                            TypeName = "Nginx"
                        },
                        new
                        {
                            id = 42,
                            TypeName = "IIS Deployment"
                        },
                        new
                        {
                            id = 43,
                            TypeName = "JWT"
                        },
                        new
                        {
                            id = 44,
                            TypeName = "OAuth 2.0"
                        },
                        new
                        {
                            id = 45,
                            TypeName = "Password Hashing"
                        },
                        new
                        {
                            id = 46,
                            TypeName = "HTTPS"
                        },
                        new
                        {
                            id = 47,
                            TypeName = "SQL Injection Prevention"
                        },
                        new
                        {
                            id = 48,
                            TypeName = "XSS Prevention"
                        },
                        new
                        {
                            id = 49,
                            TypeName = "Data Encryption"
                        },
                        new
                        {
                            id = 50,
                            TypeName = "Postman"
                        },
                        new
                        {
                            id = 51,
                            TypeName = "Swagger"
                        },
                        new
                        {
                            id = 52,
                            TypeName = "Visual Studio"
                        },
                        new
                        {
                            id = 53,
                            TypeName = "VS Code"
                        },
                        new
                        {
                            id = 54,
                            TypeName = "Figma"
                        },
                        new
                        {
                            id = 55,
                            TypeName = "Trello"
                        },
                        new
                        {
                            id = 56,
                            TypeName = "Jira"
                        },
                        new
                        {
                            id = 57,
                            TypeName = "Problem Solving"
                        },
                        new
                        {
                            id = 58,
                            TypeName = "Teamwork"
                        },
                        new
                        {
                            id = 59,
                            TypeName = "Communication"
                        },
                        new
                        {
                            id = 60,
                            TypeName = "Time Management"
                        },
                        new
                        {
                            id = 61,
                            TypeName = "Adaptability"
                        },
                        new
                        {
                            id = 62,
                            TypeName = "Critical Thinking"
                        },
                        new
                        {
                            id = 63,
                            TypeName = "Creativity"
                        },
                        new
                        {
                            id = 64,
                            TypeName = "Attention to Detail"
                        },
                        new
                        {
                            id = 65,
                            TypeName = "Leadership"
                        },
                        new
                        {
                            id = 66,
                            TypeName = "Work Under Pressure"
                        },
                        new
                        {
                            id = 67,
                            TypeName = "Continuous Learning"
                        },
                        new
                        {
                            id = 68,
                            TypeName = "Self-Motivation"
                        },
                        new
                        {
                            id = 69,
                            TypeName = "Decision Making"
                        },
                        new
                        {
                            id = 70,
                            TypeName = "Responsibility"
                        },
                        new
                        {
                            id = 71,
                            TypeName = "Project Management"
                        },
                        new
                        {
                            id = 72,
                            TypeName = "Business Analysis"
                        },
                        new
                        {
                            id = 73,
                            TypeName = "Strategic Planning"
                        },
                        new
                        {
                            id = 74,
                            TypeName = "Operations Management"
                        },
                        new
                        {
                            id = 75,
                            TypeName = "Team Leadership"
                        },
                        new
                        {
                            id = 76,
                            TypeName = "Customer Service"
                        },
                        new
                        {
                            id = 77,
                            TypeName = "Negotiation"
                        },
                        new
                        {
                            id = 78,
                            TypeName = "Sales"
                        },
                        new
                        {
                            id = 79,
                            TypeName = "Financial Management"
                        },
                        new
                        {
                            id = 80,
                            TypeName = "Digital Marketing"
                        },
                        new
                        {
                            id = 81,
                            TypeName = "Social Media Marketing"
                        },
                        new
                        {
                            id = 82,
                            TypeName = "Content Writing"
                        },
                        new
                        {
                            id = 83,
                            TypeName = "Copywriting"
                        },
                        new
                        {
                            id = 84,
                            TypeName = "SEO (Search Engine Optimization)"
                        },
                        new
                        {
                            id = 85,
                            TypeName = "Email Marketing"
                        },
                        new
                        {
                            id = 86,
                            TypeName = "Advertising Campaigns"
                        },
                        new
                        {
                            id = 87,
                            TypeName = "Brand Management"
                        },
                        new
                        {
                            id = 88,
                            TypeName = "Market Research"
                        },
                        new
                        {
                            id = 89,
                            TypeName = "Graphic Design"
                        },
                        new
                        {
                            id = 90,
                            TypeName = "Video Editing"
                        },
                        new
                        {
                            id = 91,
                            TypeName = "Photography"
                        },
                        new
                        {
                            id = 92,
                            TypeName = "Illustration"
                        },
                        new
                        {
                            id = 93,
                            TypeName = "Motion Graphics"
                        },
                        new
                        {
                            id = 94,
                            TypeName = "UI Design"
                        },
                        new
                        {
                            id = 95,
                            TypeName = "UX Design"
                        },
                        new
                        {
                            id = 96,
                            TypeName = "Canva"
                        },
                        new
                        {
                            id = 97,
                            TypeName = "Adobe Photoshop"
                        },
                        new
                        {
                            id = 98,
                            TypeName = "Adobe Illustrator"
                        },
                        new
                        {
                            id = 99,
                            TypeName = "Adobe Premiere Pro"
                        },
                        new
                        {
                            id = 100,
                            TypeName = "After Effects"
                        },
                        new
                        {
                            id = 101,
                            TypeName = "Public Speaking"
                        },
                        new
                        {
                            id = 102,
                            TypeName = "Networking"
                        },
                        new
                        {
                            id = 103,
                            TypeName = "Negotiation Skills"
                        },
                        new
                        {
                            id = 104,
                            TypeName = "Customer Relationship Management"
                        },
                        new
                        {
                            id = 105,
                            TypeName = "Conflict Resolution"
                        },
                        new
                        {
                            id = 106,
                            TypeName = "Presentation Skills"
                        },
                        new
                        {
                            id = 107,
                            TypeName = "Time Management"
                        },
                        new
                        {
                            id = 108,
                            TypeName = "Self-Discipline"
                        },
                        new
                        {
                            id = 109,
                            TypeName = "Adaptability"
                        },
                        new
                        {
                            id = 110,
                            TypeName = "Problem Solving"
                        },
                        new
                        {
                            id = 111,
                            TypeName = "Creativity"
                        },
                        new
                        {
                            id = 112,
                            TypeName = "Critical Thinking"
                        },
                        new
                        {
                            id = 113,
                            TypeName = "Decision Making"
                        },
                        new
                        {
                            id = 114,
                            TypeName = "Attention to Detail"
                        },
                        new
                        {
                            id = 115,
                            TypeName = "Work Under Pressure"
                        },
                        new
                        {
                            id = 116,
                            TypeName = "Translation"
                        },
                        new
                        {
                            id = 117,
                            TypeName = "Typing"
                        },
                        new
                        {
                            id = 118,
                            TypeName = "Microsoft Word"
                        },
                        new
                        {
                            id = 119,
                            TypeName = "Microsoft Excel"
                        },
                        new
                        {
                            id = 120,
                            TypeName = "Microsoft PowerPoint"
                        },
                        new
                        {
                            id = 121,
                            TypeName = "Google Workspace"
                        },
                        new
                        {
                            id = 122,
                            TypeName = "Backend Develper"
                        },
                        new
                        {
                            id = 123,
                            TypeName = "Frontend Developer"
                        });
                });

            modelBuilder.Entity("Job.Infrastructure.Context.Configuration.Messages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ConversationId")
                        .HasColumnType("INT");

                    b.Property<string>("MassageText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<DateTime?>("SendAT")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("ID");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderBy");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Job.Core.Entitys.ApplyExperience", b =>
                {
                    b.HasOne("Job.Core.Entitys.Experience", "Experience")
                        .WithMany("ApplyExperience")
                        .HasForeignKey("ExperienceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("Job.Core.Entitys.ApplyJob", b =>
                {
                    b.HasOne("Job.Core.Entitys.Employees", "Employee")
                        .WithMany("ApplyJobs")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Job.Core.Entitys.Jobs", "Jobs")
                        .WithMany("ApplyJobs")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Job.Core.Entitys.ApplySkill", b =>
                {
                    b.HasOne("Job.Core.Entitys.Skills", "Skill")
                        .WithMany("ApplySkill")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "AppUser")
                        .WithMany("ApplySkill")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Job.Core.Entitys.Comments", b =>
                {
                    b.HasOne("Job.Core.Entitys.Posts", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job.Core.Entitys.Company", b =>
                {
                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "AppUser")
                        .WithOne("Company")
                        .HasForeignKey("Job.Core.Entitys.Company", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Job.Core.Entitys.Connections", b =>
                {
                    b.HasOne("Job.Core.Entitys.Employees", "UserReseiver")
                        .WithMany("ConnectionReseiver")
                        .HasForeignKey("Reseiver")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Job.Core.Entitys.Employees", "UserSender")
                        .WithMany("ConnectionSender")
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserReseiver");

                    b.Navigation("UserSender");
                });

            modelBuilder.Entity("Job.Core.Entitys.Conversations", b =>
                {
                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "AppUser1")
                        .WithMany("Conversations1")
                        .HasForeignKey("UserID1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "AppUser2")
                        .WithMany("Conversations2")
                        .HasForeignKey("UserID2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser1");

                    b.Navigation("AppUser2");
                });

            modelBuilder.Entity("Job.Core.Entitys.Employees", b =>
                {
                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "AppUser")
                        .WithOne("Employees")
                        .HasForeignKey("Job.Core.Entitys.Employees", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Job.Core.Entitys.Experience", b =>
                {
                    b.HasOne("Job.Core.Entitys.Company", "Company")
                        .WithMany("Experience")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Job.Core.Entitys.Employees", "Employee")
                        .WithMany("Experiences")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Job.Core.Entitys.Followers", b =>
                {
                    b.HasOne("Job.Core.Entitys.Company", "Company")
                        .WithMany("Followers")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "UserFolloer")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("UserFolloer");
                });

            modelBuilder.Entity("Job.Core.Entitys.Jobs", b =>
                {
                    b.HasOne("Job.Core.Entitys.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Job.Core.Entitys.JobSkillType", b =>
                {
                    b.HasOne("Job.Core.Entitys.Jobs", "Job")
                        .WithMany("JobSkillTypes")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job.Core.Entitys.SkillsType", "SkillsType")
                        .WithMany("JobSkillType")
                        .HasForeignKey("SkillTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("SkillsType");
                });

            modelBuilder.Entity("Job.Core.Entitys.Likes", b =>
                {
                    b.HasOne("Job.Core.Entitys.Posts", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job.Core.Entitys.LikesOnComments", b =>
                {
                    b.HasOne("Job.Core.Entitys.Comments", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "User")
                        .WithMany("LikesOnComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job.Core.Entitys.Posts", b =>
                {
                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job.Core.Entitys.Skills", b =>
                {
                    b.HasOne("Job.Core.Entitys.Employees", "Employee")
                        .WithMany("Skills")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Job.Core.Entitys.SkillsType", "SkillsType")
                        .WithMany("skills")
                        .HasForeignKey("SkillTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Employee");

                    b.Navigation("SkillsType");
                });

            modelBuilder.Entity("Job.Infrastructure.Context.Configuration.Messages", b =>
                {
                    b.HasOne("Job.Core.Entitys.Conversations", "Conversation")
                        .WithMany("Message")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", "AppUser")
                        .WithMany("Messages")
                        .HasForeignKey("SenderBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Employment.Infrastructure.Entitys.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employment.Infrastructure.Entitys.AppUser", b =>
                {
                    b.Navigation("ApplySkill");

                    b.Navigation("Comments");

                    b.Navigation("Company");

                    b.Navigation("Conversations1");

                    b.Navigation("Conversations2");

                    b.Navigation("Employees");

                    b.Navigation("Followers");

                    b.Navigation("Likes");

                    b.Navigation("LikesOnComments");

                    b.Navigation("Messages");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Job.Core.Entitys.Comments", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Job.Core.Entitys.Company", b =>
                {
                    b.Navigation("Experience");

                    b.Navigation("Followers");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Job.Core.Entitys.Conversations", b =>
                {
                    b.Navigation("Message");
                });

            modelBuilder.Entity("Job.Core.Entitys.Employees", b =>
                {
                    b.Navigation("ApplyJobs");

                    b.Navigation("ConnectionReseiver");

                    b.Navigation("ConnectionSender");

                    b.Navigation("Experiences");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Job.Core.Entitys.Experience", b =>
                {
                    b.Navigation("ApplyExperience");
                });

            modelBuilder.Entity("Job.Core.Entitys.Jobs", b =>
                {
                    b.Navigation("ApplyJobs");

                    b.Navigation("JobSkillTypes");
                });

            modelBuilder.Entity("Job.Core.Entitys.Posts", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Job.Core.Entitys.Skills", b =>
                {
                    b.Navigation("ApplySkill");
                });

            modelBuilder.Entity("Job.Core.Entitys.SkillsType", b =>
                {
                    b.Navigation("JobSkillType");

                    b.Navigation("skills");
                });
#pragma warning restore 612, 618
        }
    }
}
